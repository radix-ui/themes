.rt-BaseCard {
  display: block;
  position: relative;
  border-radius: var(--base-card-border-radius);

  /* Don't inherit text alignment */
  text-align: initial;

  /* Blend inset shadow with container background */
  border: var(--base-card-border-width) solid transparent;
  background-clip: padding-box;

  &::after {
    inset: 0;
    position: absolute;
    pointer-events: none;
    border-radius: calc(var(--base-card-border-radius) - var(--base-card-border-width));
    content: '';
  }
}

.rt-BaseCardInner {
  --inset-border-width: var(--base-card-border-width);
  --inset-border-radius: var(--base-card-border-radius);
  position: relative;
  border-radius: inherit;
  overflow: hidden;
  box-sizing: border-box;
  padding-top: var(--base-card-padding-top);
  padding-right: var(--base-card-padding-right);
  padding-bottom: var(--base-card-padding-bottom);
  padding-left: var(--base-card-padding-left);

  /*
   * Some layout acrobatics with `var(--base-card-border-width)` because we want:
   * 1. <Card> with fixed height to clip overflowing content.
   * 2. <Inset> that clips to cardâ€™s border-box or padding-box depending on the `clip` value.
   *
   * To have both (1) and (2), we clip the content at the outer edge of `.rt-BaseCard` border.
   * To achieve that, `.rt-BaseCardInner` size is increased by the border width amount and put
   * back in place using a matching negative margin; inset padding needs a compensation too.
   */
  --inset-padding-top: calc(var(--base-card-padding-top) - var(--base-card-border-width));
  --inset-padding-right: calc(var(--base-card-padding-right) - var(--base-card-border-width));
  --inset-padding-bottom: calc(var(--base-card-padding-bottom) - var(--base-card-border-width));
  --inset-padding-left: calc(var(--base-card-padding-left) - var(--base-card-border-width));
  width: calc(100% + var(--base-card-border-width) * 2);
  height: calc(100% + var(--base-card-border-width) * 2);
  margin: calc(-1 * var(--base-card-border-width));
}

/* prettier-ignore */
:where(.radix-themes) {
  /*
   * Make sure that hovered shadows length matches the shadows length at rest for clean transitions:
   * https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow#interpolation
   */
  --base-card-classic-hover-box-shadow:
    0 0 0 1px var(--gray-a5),
    0 1px 1px 1px var(--black-a2),
    0 2px 1px -1px var(--gray-a3),
    0 2px 3px -2px var(--black-a1),
    0 3px 12px -4px var(--gray-a3),
    0 4px 16px -8px var(--black-a1);
}
/* prettier-ignore */
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --base-card-classic-hover-box-shadow:
    0 0 0 1px var(--gray-a7),
    0 0 1px 1px var(--gray-a7),
    0 0 1px -1px var(--gray-a4),
    0 0 3px -2px var(--gray-a3),
    0 0 12px -2px var(--gray-a3),
    0 0 16px -8px var(--gray-a9);
}
/* prettier-ignore */
@supports (color: color-mix(in oklab, white, black)) {
  :is(.dark, .dark-theme),
  :is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
    --base-card-classic-hover-box-shadow:
      0 0 0 1px color-mix(in oklab, var(--gray-a7), var(--gray-8)),
      0 0 1px 1px var(--gray-a7),
      0 0 1px -1px var(--gray-a4),
      0 0 3px -2px var(--gray-a3),
      0 0 12px -2px var(--gray-a3),
      0 0 16px -8px var(--gray-a9);
  }
}
