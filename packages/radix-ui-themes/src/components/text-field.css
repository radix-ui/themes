.rt-TextFieldRoot {
  display: flex;
  box-sizing: border-box;
  position: relative;
  z-index: 0;
  cursor: text;
}

.rt-TextFieldInput {
  display: block;
  box-sizing: border-box;
  padding: 0;
  width: 100%;
  appearance: none;
  -webkit-tap-highlight-color: transparent;
  outline: none;
  font-family: inherit;
  background-color: transparent;
  position: relative;
  z-index: 1;

  /* Clip text to the inner shadow */
  border: var(--text-field-border-width) solid transparent;

  &:where(:autofill, [data-com-onepassword-filled]) {
    /* Reliably removes native autofill colors */
    background-clip: text;
    -webkit-text-fill-color: var(--gray-12);
  }
}

.rt-TextFieldChrome {
  position: absolute;
  inset: 0;
  z-index: 0;
  pointer-events: none;

  :where(.rt-TextFieldInput:focus) + & {
    outline: 2px solid var(--color-focus-root);
    outline-offset: -1px;
  }
}

.rt-TextFieldSlot {
  flex-shrink: 0;
  display: flex;
  align-items: center;
  position: relative;
  z-index: 1;
  color: var(--gray-a11);

  &:where([data-accent-color]) {
    color: var(--accent-a11);
  }
  &:where(:empty) {
    display: none;
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-TextFieldSlot {
    &:where(.rt-r-size-1) {
      gap: var(--space-2);
      padding-left: var(--space-1);
      padding-right: var(--space-1);
    }
    &:where(.rt-r-size-2) {
      gap: var(--space-2);
      padding-left: var(--space-2);
      padding-right: var(--space-2);
    }
    &:where(.rt-r-size-3) {
      gap: var(--space-3);
      padding-left: var(--space-3);
      padding-right: var(--space-3);
    }
  }
  .rt-TextFieldInput {
    &:where(.rt-r-size-1) {
      height: var(--space-5);
      font-size: var(--font-size-1);
      letter-spacing: var(--letter-spacing-1);

      &:where(:first-child) {
        /* Equivalent to padding-left, but doesn't cut off long values when cursor is at the end. */
        text-indent: calc(var(--space-1) * 1.5 - var(--text-field-border-width));
        /* Clip text to the visible border radius */
        border-radius: max(var(--radius-2), var(--radius-full));
      }

      & + :where(.rt-TextFieldChrome) {
        border-radius: max(var(--radius-2), var(--radius-full));
      }
    }
    &:where(.rt-r-size-2) {
      height: var(--space-6);
      font-size: var(--font-size-2);
      letter-spacing: var(--letter-spacing-2);

      /* Avoid 1px baseline jitter when layout around the text field is subpixel-sized (e.g. vh units). */
      /* Works because as of Nov 2023, Chrome computes input text bounding box height as 16.5px on @2x screens. */
      padding-bottom: 0.5px;

      &:where(:first-child) {
        /* Equivalent to padding-left, but doesn't cut off long values when cursor is at the end */
        text-indent: calc(var(--space-2) - var(--text-field-border-width));
        /* Clip text to the visible border radius */
        border-radius: max(var(--radius-2), var(--radius-full));
      }

      & + :where(.rt-TextFieldChrome) {
        border-radius: max(var(--radius-2), var(--radius-full));
      }
    }
    &:where(.rt-r-size-3) {
      height: var(--space-7);
      font-size: var(--font-size-3);
      letter-spacing: var(--letter-spacing-3);

      &:where(:first-child) {
        /* Equivalent to padding-left, but doesn't cut off long values when cursor is at the end */
        text-indent: calc(var(--space-3) - var(--text-field-border-width));
        /* Clip text to the visible border radius */
        border-radius: max(var(--radius-3), var(--radius-full));
      }

      & + :where(.rt-TextFieldChrome) {
        border-radius: max(var(--radius-3), var(--radius-full));
      }
    }
  }
}

/* As an enhancement, remove border-radius on the right if thereâ€™s a slot */
.rt-TextFieldInput:where(:has(~ .rt-TextFieldSlot)) {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

/***************************************************************************************************
	*                                                                                                 *
	* VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */

.rt-TextFieldInput:where(.rt-variant-surface) {
  --text-field-border-width: 1px;
  color: var(--gray-12);

  & + :where(.rt-TextFieldChrome) {
    background-color: var(--color-surface);
    box-shadow: inset 0 0 0 1px var(--gray-a7);
    /* Blend inner shadow with page background */
    padding: 1px;
    background-clip: content-box;
  }
  &::placeholder {
    color: var(--gray-a10);
    /* Firefox */
    opacity: 1;
  }
  &:where(:autofill, [data-com-onepassword-filled]):where(:not(:disabled, :read-only)) {
    & + :where(.rt-TextFieldChrome) {
      background-color: var(--color-autofill-root);
      box-shadow: inset 0 0 0 1px var(--color-autofill-root), inset 0 0 0 1px var(--gray-a6);
    }
  }
  &:where(:disabled, :read-only) {
    & + :where(.rt-TextFieldChrome) {
      /* Blend with grey */
      background-image: linear-gradient(var(--gray-a3), var(--gray-a3));
    }
  }
}

/* classic */

.rt-TextFieldInput:where(.rt-variant-classic) {
  --text-field-border-width: 1px;
  color: var(--gray-12);

  & + :where(.rt-TextFieldChrome) {
    background-color: var(--color-surface);
    box-shadow: var(--shadow-1);
    /* Blend inner shadow with page background */
    padding: 1px;
    background-clip: content-box;
  }
  &::placeholder {
    color: var(--gray-a10);
    /* Firefox */
    opacity: 1;
  }
  &:where(:autofill, [data-com-onepassword-filled]):where(:not(:disabled, :read-only)) {
    & + :where(.rt-TextFieldChrome) {
      background-color: var(--color-autofill-root);
      box-shadow: inset 0 0 0 1px var(--color-autofill-root), var(--shadow-1);
    }
  }
  &:where(:disabled, :read-only) {
    & + :where(.rt-TextFieldChrome) {
      /* Blend with grey */
      background-image: linear-gradient(var(--gray-a3), var(--gray-a3));
    }
  }
}

/* soft */
.rt-TextFieldInput:where(.rt-variant-soft) {
  --text-field-border-width: 0px;
  color: var(--accent-12);

  & + :where(.rt-TextFieldChrome) {
    background-color: var(--accent-a3);
  }
  &::placeholder {
    color: var(--accent-12);
    opacity: 0.6;
  }
  &:where(:autofill, [data-com-onepassword-filled]):where(:not(:disabled, :read-only)) {
    & + :where(.rt-TextFieldChrome) {
      /* Use gray autofill color when component color is gray */
      background-color: var(--accent-a4);
    }
  }
  &:where(:focus) {
    & + :where(.rt-TextFieldChrome) {
      /* Use gray outline when component color is gray */
      outline-color: var(--accent-8);
    }
  }
  &:where(:disabled, :read-only) {
    & + :where(.rt-TextFieldChrome) {
      background-color: var(--gray-a4);
    }
  }
  &::selection {
    /* Use gray selection when component color is gray */
    background-color: var(--accent-a5);
  }
}

/* all disabled and read-only text fields */

.rt-TextFieldInput {
  &:where(:disabled, :read-only) {
    cursor: text;
    color: var(--gray-a11);
    /* Safari */
    -webkit-text-fill-color: var(--gray-a11);

    &:where(:focus) + :where(.rt-TextFieldChrome) {
      outline: 2px solid var(--gray-8);
    }
    &::placeholder {
      opacity: 0.5;
    }
    &:where(:placeholder-shown) {
      cursor: default;
    }
    &::selection {
      background-color: var(--gray-a5);
    }

    /* Cursor in gaps around slots, as an enhancement */
    .rt-TextFieldRoot:where(:has(&)) {
      cursor: text;
    }
    .rt-TextFieldRoot:where(:has(&:placeholder-shown)) {
      cursor: default;
    }
  }
}
