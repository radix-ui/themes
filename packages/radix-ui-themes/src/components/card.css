/* stylelint-disable selector-max-type */
/* Disable selector-max-type rule to target `button` and `a` tags. */
/* Make sure these tags are wrapped in `:where()` for 0 specificity. */

.rt-Card {
  --inset-border-radius: var(--card-border-radius);
  --inset-padding: var(--card-padding);
  border-radius: var(--card-border-radius);
  padding: var(--card-padding);
  position: relative;

  &:where(button, a) {
    display: block;
  }

  &::after {
    inset: 0;
    position: absolute;
    pointer-events: none;
    border-radius: inherit;
    content: '';
  }

  &:where(:focus-visible)::after {
    outline: 2px solid var(--accent-8);
    outline-offset: -1px;
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

.rt-Card {
  &:where(.rt-variant-ghost) {
    /* We reset the defined margin variables to avoid inheriting them from a higher component */
    /* If a margin IS defined on the component itself, the utility class will win and reset it */
    --margin-top: 0px;
    --margin-right: 0px;
    --margin-bottom: 0px;
    --margin-left: 0px;

    /* Define the overrides to incorporate the negative margins */
    --margin-top-override: calc(var(--margin-top) - var(--card-padding));
    --margin-right-override: calc(var(--margin-right) - var(--card-padding));
    --margin-bottom-override: calc(var(--margin-bottom) - var(--card-padding));
    --margin-left-override: calc(var(--margin-left) - var(--card-padding));

    /* Reset the overrides on direct children */
    :where(&) > * {
      --margin-top-override: initial;
      --margin-right-override: initial;
      --margin-bottom-override: initial;
      --margin-left-override: initial;
    }

    margin: var(--margin-top-override) var(--margin-right-override) var(--margin-bottom-override)
      var(--margin-left-override);
  }
}

@breakpoints {
  .rt-Card {
    &:where(.rt-r-size-1) {
      --card-padding: var(--space-3);
      --card-border-radius: var(--radius-4);
    }
    &:where(.rt-r-size-2) {
      --card-padding: var(--space-4);
      --card-border-radius: var(--radius-4);
    }
    &:where(.rt-r-size-3) {
      --card-padding: var(--space-5);
      --card-border-radius: var(--radius-5);
    }
    &:where(.rt-r-size-4) {
      --card-padding: var(--space-6);
      --card-border-radius: var(--radius-5);
    }
    &:where(.rt-r-size-5) {
      --card-padding: var(--space-8);
      --card-border-radius: var(--radius-6);
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* surface */

.rt-Card:where(.rt-variant-surface) {
  --inset-border-width: 1px;
  --card-shadow-border-radius: calc(var(--card-border-radius) - 1px);
  border: 1px solid transparent;
  background-color: var(--color-panel);
  background-clip: padding-box;

  &::after {
    border-radius: var(--card-shadow-border-radius);
    box-shadow: 0 0 0 1px var(--gray-a6);
    /* When possible, use only a half-transparent gray for nicer border blending with inset images in dark mode */
    box-shadow: 0 0 0 1px color-mix(in oklab, var(--gray-a6), var(--gray-6) 25%);
  }

  &:where(button, [href]) {
    @media (hover: hover) {
      &:where(:hover)::after {
        box-shadow: 0 0 0 1px var(--gray-a8);
        box-shadow: 0 0 0 1px color-mix(in oklab, var(--gray-a8), var(--gray-8) 25%);
      }
    }
    &:where(:active:not([data-state='open'])) {
      &::after {
        box-shadow: 0 0 0 1px var(--gray-a8), 0 0 0 1px var(--gray-a6);
        box-shadow: 0 0 0 1px color-mix(in oklab, var(--gray-a8), var(--gray-8) 25%),
          0 0 0 1px var(--gray-a6);
      }
      &:where(:focus-visible) {
        background-color: var(--gray-a3);
      }
    }
  }
}

/* prettier-ignore */
.radix-themes {
  /*
   * Make sure that hovered shadows length matches the shadows length at rest for clean transitions:
   * https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow#interpolation
   */
  --card-classic-box-shadow-hover:
    0 0 0 1px var(--gray-a5),
    0 1px 1px 1px var(--gray-a4),
    0 2px 1px -1px var(--gray-a3),
    0 2px 3px -2px var(--gray-a3),
    0 3px 12px -4px var(--gray-a3),
    0 4px 16px -8px var(--black-a1);
}
/* prettier-ignore */
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --card-classic-box-shadow-hover:
    0 0 0 1px var(--gray-a7),
    0 0 1px 1px var(--gray-a7),
    0 0 1px -1px var(--gray-a4),
    0 0 3px -2px var(--gray-a3),
    0 0 12px -2px var(--gray-a3),
    0 0 16px -8px var(--gray-a9);
}

/* prettier-ignore */
@supports (color: color-mix(in oklab, white, black)) {
  :is(.dark, .dark-theme),
  :is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
    --card-classic-box-shadow-hover:
      0 0 0 1px color-mix(in oklab, var(--gray-a7), var(--gray-8)),
      0 0 1px 1px var(--gray-a7),
      0 0 1px -1px var(--gray-a4),
      0 0 3px -2px var(--gray-a3),
      0 0 12px -2px var(--gray-a3),
      0 0 16px -8px var(--gray-a9);
  }
}

.rt-Card:where(.rt-variant-classic) {
  --inset-border-width: 1px;
  --card-shadow-border-radius: calc(var(--card-border-radius) - 1px);
  border: 1px solid transparent;
  background-color: var(--color-panel);
  background-clip: padding-box;

  &::after {
    border-radius: var(--card-shadow-border-radius);
    /* A transparent shadow to transition smoothly to `:active` */
    box-shadow: 0 0 0 1px var(--color-transparent), var(--shadow-2);
    transition: box-shadow 120ms;
  }

  &:where(button, [href]) {
    @media (hover: hover) {
      &:where(:hover) {
        &::after {
          transition-duration: 40ms;
          box-shadow: var(--card-classic-box-shadow-hover);
        }
      }
    }
    &:where(:active:not([data-state='open'])) {
      &::after {
        transition-duration: 40ms;
        box-shadow: 0 0 0 1px var(--gray-a5), var(--shadow-2);
      }
      &:where(:focus-visible) {
        background-color: var(--gray-a3);
      }
    }
  }
}

/* ghost */

.rt-Card:where(.rt-variant-ghost) {
  &:where(button, [href]) {
    @media (hover: hover) {
      &:where(:hover) {
        background-color: var(--gray-a3);
      }
    }
    &:where(:active:not([data-state='open'])) {
      background-color: var(--gray-a4);
    }
  }
}
